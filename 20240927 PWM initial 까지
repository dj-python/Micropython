from machine import Pin, PWM
# import W5500_EVB_PICO as W5500
import time

class SocketStatus:
    UNKNOWN = 1
    IDLE = 2
    ERROR = 3


class SocketError:
    NONE = 'ERROR_NONE'
    INIT_SOCKET_POS = 'ERROR_INIT_SOCKET_POS'



class MainHandler:
    TIMEOUT_INIT_SOCKET_POS = 300  # 50ms * 300 = 15s

    cTemp = 0

    def __init__(self):
        self.f_executeTask = False                                           # 소켓 구동 변수 초기값 False
        self.idx_executeTask = 0                                             # 소켓 구동 인덱스 초기값 0
        self.sysBuzzer = Pin(14, Pin.OUT)
        self.gpioIn_sel = Pin(15, Pin.OUT)
        self.sysLed_pico = Pin(25, Pin.OUT)
        self.sysLed_board = Pin(28, Pin.OUT)




        # region Init GPIO_OUT
        self.gpioOut_clampClose = Pin(0, Pin.OUT)
        self.gpioOut_clampOpen = Pin(1, Pin.OUT)
        self.gpioOut_rotation0 = Pin(2, Pin.OUT)
        self.gpioOut_rotation90 = Pin(3, Pin.OUT)
        self.gpioOut_vacuum = Pin(4, Pin.OUT)
        self.gpioOut_spare1 = Pin(6, Pin.OUT)
        self.gpioOut_spare2 = Pin(7, Pin.OUT)
        self.init_gpioOut()
        # endregion

        # region Description
        self.gpioIn0 = Pin(10, Pin.IN)                             # PULL_DOWN 안해도 되는지?
        self.gpioIn1 = Pin(11, Pin.IN)
        self.gpioIn2 = Pin(12, Pin.IN)
        self.gpioIn3 = Pin(13, Pin.IN)

        self.gpioIn_ipSel1 = Pin(22, Pin.IN)
        self.gpioIn_ipSel2 = Pin(26, Pin.IN)
        self.gpioIn_ipSel4 = Pin(27, Pin.IN)

        self.gpioIn_clampClose = None                                # 상태 체크를 위해 변수 지정. 예전에는 딕셔너리로 했음
        self.gpioIn_clampOpen = None
        self.gpioIn_rotation0 = None
        self.gpioIn_rotation90 = None
        self.gpioIn_vacumm = None
        self.gpioIn_socketClose = None
        self.gpioIn_socketOpen = None
        # endregion

        # region Init Ethernet
        ipAddress = ''
        if self.gpioIn_ipSel1.value() == 0 and self.gpioIn_ipSel2.value() == 0 and self.gpioIn_ipSel4.value() == 0:
         ipAddress = '192.168.0.51'
        elif self.gpioIn_ipSel1.value() == 0 and self.gpioIn_ipSel2.value() == 0 and self.gpioIn_ipSel4.value() == 1:
            ipAddress = '192.168.0.52'
        elif self.gpioIn_ipSel1.value() == 0 and self.gpioIn_ipSel2.value() == 1 and self.gpioIn_ipSel4.value() == 0:
            ipAddress = '192.168.0.53'
        elif self.gpioIn_ipSel1.value() == 0 and self.gpioIn_ipSel2.value() == 1 and self.gpioIn_ipSel4.value() == 1:
            ipAddress = '192.168.0.54'
        elif self.gpioIn_ipSel1.value() == 1 and self.gpioIn_ipSel2.value() == 0 and self.gpioIn_ipSel4.value() == 0:
            ipAddress = '192.168.0.55'
        elif self.gpioIn_ipSel1.value() == 1 and self.gpioIn_ipSel2.value() == 0 and self.gpioIn_ipSel4.value() == 1:
            ipAddress = '192.168.0.56'
        elif self.gpioIn_ipSel1.value() == 1 and self.gpioIn_ipSel2.value() == 1 and self.gpioIn_ipSel4.value() == 0:
            ipAddress = '192.168.0.57'
        elif self.gpioIn_ipSel1.value() == 1 and self.gpioIn_ipSel2.value() == 1 and self.gpioIn_ipSel4.value() == 1:
            ipAddress = '192.168.0.58'

        # W5500.init(ipAddress=ipAddress)
        # endregion


        self.servo_pwm = PWM(Pin(5), freq=50, duty_u16=int(2**16 * 0.5))      # 변수선언만 하는게 아니라 close상태?
        time.sleep(1)

        self.cntExecProcess = 0
        self.cntTimeOutExecProcess = 0

        self.socketCover_pwmDuty_close = 0                                    # Socket 초기화 close 위치 정의
        self.socketCover_pwmDuty_open = 0                                     # Socket 초기화 Open 위치 정의
        self.isExecProcess_initSocketPos = True
        self.idxExecProcess_initSocketPos = 0
        self.socketStatus = SocketStatus.UNKNOWN
        self.socketError = SocketError.NONE

        self.isExecProcess_main = False
        self.idxExecProcess_main = 0

    def init_gpioOut(self):                                                 # 전원 on시 초기화 함
        self.set_gpioOut(self.sysBuzzer, False)

        self.set_gpioOut(self.gpioOut_clampClose, False)
        self.set_gpioOut(self.gpioOut_clampOpen, True)
        self.set_gpioOut(self.gpioOut_rotation0, True)
        self.set_gpioOut(self.gpioOut_rotation90, False)
        self.set_gpioOut(self.gpioOut_vacuum, False)
        self.set_gpioOut(self.gpioOut_spare1, False)
        self.set_gpioOut(self.gpioOut_spare2, False)

    @staticmethod
    def set_gpioOut(target, value):
        target.value(not value)

    def get_gpioIn(self):
        # GPIO_IN0:IN3
        self.gpioIn_sel.on()                                        # self.gpioIn_sel.value(1) 과 같은지??
        time.sleep_us(1)
        self.gpioIn_clampClose = not self.gpioIn0.value()
        self.gpioIn_clampOpen = not self.gpioIn1.value()
        self.gpioIn_rotation0 = not self.gpioIn2.value()
        self.gpioIn_rotation90 = not self.gpioIn3.value()

        # GPIO_IN4:IN7 -> IN7: Spare
        self.gpioIn_sel.off()
        time.sleep_us(1)
        self.gpioIn_vacuum = not self.gpioIn0.value()
        self.gpioIn_socketClose = not self.gpioIn1.value()
        self.gpioIn_socketOpen = not self.gpioIn2.value()


    def socket_test(self):
        while True:
            self.servo_pwm.duty_u16(3400)
            time.sleep(1)
            self.servo_pwm.duty_u16(6500)
            time.sleep(1)


    def func_1msec(self):
        pass
        # message = W5500.checkRxBuffer()
        # if message is not None:
        #     self.parseMessage(message)

    def func_10msec(self):
        self.get_gpioIn()

    def func_50msec(self):
        if self.isExecProcess_initSocketPos:
            self.execProcess_setSocketPos()

            self.cntTimeOutExecProcess += 1
            if self.cntTimeOutExecProcess >= MainHandler.TIMEOUT_INIT_SOCKET_POS:
                self.isExecProcess_initSocketPos = False
                self.socketStatus = SocketStatus.ERROR
                self.socketError = SocketError.INIT_SOCKET_POS

    def func_100msec(self):
        if self.f_executeTask:
            self.execute_process()

    def func_500msec(self):
        self.sysLed_pico(not self.sysLed_pico.value())
        self.sysLed_board(not self.sysLed_pico.value())

    def parseMessage(self, message):
        command = message.split('_')

        # Unit
        if command[1] == 'Vacuum':
            if command[2] == 'On':
                pass
            else:
                pass


        if message == 'startTest':
            self.f_executeTask = True
            self.idx_executeTask = 0

        elif message == 'Testfinished':                 # PAF 검사가 끝났다는 메시지 추가 필요??
            pass

        elif message == 'abortTest':
            pass
        elif message == 'emergency':
            pass
        elif message == 'clamp_close':
            pass
        elif message == 'clamp_open':
            pass
        elif message == 'vacuum_on':
            pass
        elif message == 'vacuum_off':
            pass
        elif message == 'rotation_0' or message == 'rotation_90':
            if self.gpioIn_clampClose and self.gpioIn_socketClose:
                if message == 'rotation_0':
                    pass
                else:
                    pass





    # region Socket Load sequence operation
    def execute_process(self):
        cntTimeout = 0
        if self.idx_executeTask == 0:                   # Vacuum on
            self.gpioOut_vacuum.value(1)
            self.idx_executeTask += 1
            cntTimeout = 0
        elif self.idx_executeTask == 1:                 # Vacuum spec in 체크
            if not self.gpioIn_vacuum:
                self.idx_executeTask += 1
                cntTimeout = 0
        elif self.idx_executeTask ==2:                  # Socket close 명령
            self.servo_pwm.duty_u16(self.socketCover_pwmDuty_close)
            self.idx_executeTask += 1
            cntTimeout = 0
        elif self.idx_executeTask ==3:                  # Socket close 완료 체크
            if self.gpioIn_socketClose:
                self.idx_executeTask += 1
                cntTimeout = 0
        elif self.idx_executeTask ==4:                  # Clamp close 명령
            self.gpioOut_clampClose.value(0)
            self.idx_executeTask += 1
            cntTimeout = 0
        elif self.idx_executeTask ==5:                  # Clamp close 완료 체크
            if not self.gpioIn_clampClose:
                self.idx_executeTask += 1
                cntTimeout = 0
        elif self.idx_executeTask ==6:                  # 0도 회전 off, 90도 회전 on
            self.gpioOut_rotation0.value(1)
            time.sleep_ms(500)
            self.gpioOut_rotation90.value(0)
            self.idx_executeTask +=1
            cntTimeout = 0
        elif self.idx_executeTask ==7:                  # 90도 회전 완료 체크
            if not self.gpioIn_rotation90:              #
                self.idx_executeTask +=1
                cntTimeout = 0
        elif self.idx_executeTask ==8:
            pass                                        # 상위 시스템에 검사준비 완료 message
                                                        # 다음 메시지까지 대기

        elif self.idx_executeTask ==9:                  # 90도 회전 off, 0도 회전 on
            self.gpioOut_rotation90.value(1)
            time.sleep_ms(500)
            self.gpioOut_rotation0.value(0)
            self.idx_executeTask +=1
            cntTimeout = 0
        elif self.idx_executeTask ==10:                 # 0도 회전 완료 체크
            if not self.gpioIn_rotation0:
                self.idx_executeTask +=1
                cntTimeout = 0
        elif self.idx_executeTask ==11:                 # Clamp close off, Clamp open on
            self.gpioOut_clampClose.value(1)
            time.sleep_ms(500)
            self.gpioOut_clampOpen.value(0)
            self.idx_executeTask +=1
            cntTimeout =0
        elif self.idx_executeTask ==12:                 # Clamp open 완료 체크
            if not self.gpioIn_clampClose:
                self.idx_executeTask +=1
                cntTimeout = 0
        elif self.idx_executeTask ==13:                 # Socket open on
            self.servo_pwm.duty_u16(self.socketCover_pwmDuty_open)

            pass

    # region socket initial
    def execProcess_setSocketPos(self):
        if self.idxExecProcess_initSocketPos == 0:
            self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() - 50)
            self.idxExecProcess_initSocketPos += 1
        elif self.idxExecProcess_initSocketPos == 1:
            if self.gpioIn_socketClose:                                             # Socket close 확인되면 +100 이동 (살짝 열어줌)
                self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() + 100)
                self.idxExecProcess_initSocketPos += 1
            else:                                                                   # Socket close 확인안되면 -50 이동
                self.idxExecProcess_initSocketPos -= 1
        elif self.idxExecProcess_initSocketPos == 2:                                # Socket close 확인되면 -10 이동
            self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() - 10)
            self.idxExecProcess_initSocketPos += 1
        elif self.idxExecProcess_initSocketPos == 3:
            if self.gpioIn_socketClose:                                              # Socket close 확인되면 -20 이동
                self.socketCover_pwmDuty_close = self.servo_pwm.duty_u16() - 20        # socketCover_pwmDuty_close 변수를 지정하여 Close상태 위치 정의
                self.servo_pwm.duty_u16(self.socketCover_pwmDuty_close)
                self.idxExecProcess_initSocketPos += 1
            else:
                self.idxExecProcess_initSocketPos -= 1                              # Socket open 상태면 -10 이동
        elif self.idxExecProcess_initSocketPos == 4:                                # 중간위치로 다시 이동
            # self.servo_pwm.duty_u16(4900)
            self.servo_pwm = PWM(Pin(5), freq=50, duty_u16=int(2 ** 16 * 0.5))
            self.cntExecProcess = 0
            self.idxExecProcess_initSocketPos += 1
        elif self.idxExecProcess_initSocketPos == 5:
            self.cntExecProcess += 1
            if self.cntExecProcess >= 5:
                self.idxExecProcess_initSocketPos += 1                              # cntExecProcess는 5가 된 상태에서 다음으로 넘어가게 된다.
        elif self.idxExecProcess_initSocketPos == 6:                                # Socket open 방향으로 +50 이동
            self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() + 50)
            self.idxExecProcess_initSocketPos += 1
        elif self.idxExecProcess_initSocketPos == 7:
            if self.gpioIn_socketOpen:                                              # Socket open 확인되면 -100 이동
                self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() - 100)
                self.idxExecProcess_initSocketPos += 1
            else:
                self.idxExecProcess_initSocketPos -= 1                              # Socket open 확인 안되면 앞단계 이동 (+50)
        elif self.idxExecProcess_initSocketPos == 8:                                # +10 이동
            self.servo_pwm.duty_u16(self.servo_pwm.duty_u16() + 10)
            self.idxExecProcess_initSocketPos += 1
        elif self.idxExecProcess_initSocketPos == 9:
            if self.gpioIn_socketOpen:                                              # Socket open 확인되면 +30 더 이동
                self.socketCover_pwmDuty_open = self.servo_pwm.duty_u16() + 30          # socketCover_pwmDuty_open 변수 지정하여 Open상태 위치 정의
                self.servo_pwm.duty_u16(self.socketCover_pwmDuty_open)
                self.isExecProcess_initSocketPos = False
                self.socketStatus = SocketStatus.IDLE
            else:
                self.idxExecProcess_initSocketPos -= 1



if __name__ == "__main__":
    cnt_msec = 0
    main = MainHandler()
    main.socket_test()

    while True:
        cnt_msec += 1
        main.func_1msec()

        if not cnt_msec % 10:          # 10으로 나눠서 0이 되는 10, 20, 30 .. 에서 실행
            main.func_10msec()

        if not cnt_msec % 100:
            main.func_100msec()

        if not cnt_msec % 500:
            main.func_500msec()

        time.sleep_ms(1)
